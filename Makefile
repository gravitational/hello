# We like makefiles.
# You can use any IDE you like, this Makefiles can be a good start
# to see on how you can automate your development process.
#
# Lets aim to have a few make targets:
#   - make build (default)
#   - make install
#   - make clean
#   - make test
#
.PHONY: prof doc

# default 'make' action should always be to build, preferrably with
# the simplest default command like 'go build':
build:
	go build

# 'install' is another common make target, and it fits perfectly with Golang
# we're installing the CLI in this case:
install: clean
	go install github.com/gravitational/hello/hello

# clean is to remove all flymake files that may be generated by vim/emacs plugins
clean:
	find . -name flymake_* -delete

# test is a global test that executes all tests that can be executed 
# without any external dependencies, e.g. by third-party CI/CD tools 
test: clean
	go vet ./... # note that I added vetting step here to to see if there are anything outstanding
	go test -v ./... -cover


# test-package is a handy way to test one package instead of calling all tests
# e.g. make test-package p=backend/membk
test-package: clean
	go test -v ./$(p)

# test-grep package is a handy way to test just methods that match the patterns
# in a special package, this pattern is useful when you are debugging or working on some
# test that talks to database:
# 
# make test-grep-package
test-grep-package: clean
	go test -v ./$(p) -check.f=$(e)

# cover-package is an easiest way to execute the package and take a look
# at the coverage heat map
cover-package: clean
	go test -v ./$(p)  -coverprofile=/tmp/coverage.out
	go tool cover -html=/tmp/coverage.out


# bench-package executes all benchmarks in a given package
bench-package: clean
	go test . -check.bmem  -check.b -test.bench=./$(p)

# update is a nuclear (and easiest) way to update all the godeps dependencies
# in your repository from the versions that are currently set up in your GOPATH
# workspace. It is explained 
update:
	rm -rf Godeps/
	find . -iregex .*go | xargs sed -i 's:".*Godeps/_workspace/src/:":g'
	godep save -r ./...


# sloccount is for you to track how fast does your project grow in terms of SLOC
# so you can become scared and try to make it smaller. It is set up to ingore Godeps
# make sloccount will show distribution by file and the total result
sloccount:
	find . -path ./Godeps -prune -o -name "*.go" -print0 | xargs -0 wc -l

# In case if your test has any extenral dependencies, e.g. etcd
# you can specify various variables required to connect to these
# deps using Makefile environment variables.
ETCD_NODE1 := http://127.0.0.1:4001
ETCD_NODE2 := http://127.0.0.1:4002
ETCD_NODE3 := http://127.0.0.1:4003
ETCD_NODES := ${ETCD_NODE1},${ETCD_NODE2},${ETCD_NODE3}
ETCD_FLAGS := TEST_ETCD_NODES=${ETCD_NODES}

# test-with-deps test executes tests that rely on external deps, such as Etcd. 
# It singals test suites that Etcd is available by setting ETCD_FLAGS variable
# so tests can execute the test cases that try to connect to it,
# instead of skipping. See backend/etcbk for example
test-with-deps: clean
	${ETCD_FLAGS} go test -v ./... -cover

# test-package-with-deps is like test-package, but turns on tests that rely on
# external dependencies
test-package-with-deps: clean
	${ETCD_FLAGS} go test -v ./$(p)

# cover-package-with-deps is like cover-package, but turns on tests that rely on
# external dependencies.
cover-package-with-db: clean
	${ETCD_FLAGS} go test -v ./$(p)  -coverprofile=/tmp/coverage.out
	go tool cover -html=/tmp/coverage.out

# profile launches profiler that attempts to connect to the server
profile:
	go tool pprof http://localhost:6060/debug/pprof/profile


# run starts the server in development mode
run: install
	hello -addr=localhost:23456\
          -log=console\
          -logSeverity=INFO\
          -backend=etcd\
          -backendConfig='{"nodes": ["${ETCD_NODE1}","${ETCD_NODE2}","${ETCD_NODE3}"], "key": "/teleport"}'

# docs-serve starts hosting a local version of the documentation
# it requires mkdocs to be installed, luckilly  it is as easy as
# running:
# 
#   pip install mkdocs
#
docs-serve:
	sleep 1 && sensible-browser http://127.0.0.1:32567 &
	mkdocs serve
